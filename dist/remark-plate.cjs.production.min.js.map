{"version":3,"file":"remark-plate.cjs.production.min.js","sources":["../src/ast-types.ts","../src/deserialize.ts","../src/serialize.ts","../src/plugin.ts"],"sourcesContent":["export interface NodeTypes {\n  paragraph: 'p';\n  block_quote: 'blockquote';\n  code_block: 'code_block';\n  link: 'a';\n  ul_list: 'ul';\n  ol_list: 'ol';\n  listItem: 'li';\n  heading: {\n    1: 'h1';\n    2: 'h2';\n    3: 'h3';\n    4: 'h4';\n    5: 'h5';\n    6: 'h6';\n  };\n  emphasis_mark: 'italic';\n  strong_mark: 'bold';\n  delete_mark: 'strikethrough';\n  inline_code_mark: 'code';\n  thematic_break: 'hr';\n  image: 'img';\n  mention: 'mention';\n}\n\nexport type MdastNodeType =\n  | 'paragraph'\n  | 'heading'\n  | 'list'\n  | 'listItem'\n  | 'link'\n  | 'image'\n  | 'blockquote'\n  | 'code'\n  | 'html'\n  | 'emphasis'\n  | 'strong'\n  | 'delete'\n  | 'inlineCode'\n  | 'thematicBreak'\n  | 'text'\n  | 'break'\n  | 'mention';\n\nexport const defaultNodeTypes: NodeTypes = {\n  paragraph: 'p',\n  block_quote: 'blockquote',\n  code_block: 'code_block',\n  link: 'a',\n  ul_list: 'ul',\n  ol_list: 'ol',\n  listItem: 'li',\n  heading: {\n    1: 'h1',\n    2: 'h2',\n    3: 'h3',\n    4: 'h4',\n    5: 'h5',\n    6: 'h6',\n  },\n  emphasis_mark: 'italic',\n  strong_mark: 'bold',\n  delete_mark: 'strikethrough',\n  inline_code_mark: 'code',\n  thematic_break: 'hr',\n  image: 'img',\n  mention: 'mention',\n};\n\nexport interface LeafType {\n  text: string;\n  strikethrough?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  code?: boolean;\n  parentType?: string;\n  mention?: boolean;\n  value?: string;\n}\n\nexport interface BlockType {\n  type: string;\n  parentType?: string;\n  url?: string;\n  caption?: string;\n  language?: string;\n  break?: boolean;\n  children: Array<BlockType | LeafType>;\n}\n\nexport interface InputNodeTypes {\n  paragraph: string;\n  block_quote: string;\n  code_block: string;\n  link: string;\n  ul_list: string;\n  ol_list: string;\n  listItem: string;\n  heading: {\n    1: string;\n    2: string;\n    3: string;\n    4: string;\n    5: string;\n    6: string;\n  };\n  emphasis_mark: string;\n  strong_mark: string;\n  delete_mark: string;\n  inline_code_mark: string;\n  thematic_break: string;\n  image: string;\n  mention: string;\n}\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\nexport interface OptionType<T extends InputNodeTypes = InputNodeTypes> {\n  nodeTypes?: RecursivePartial<T>;\n  linkDestinationKey?: string;\n  imageSourceKey?: string;\n  imageCaptionKey?: string;\n}\n\nexport interface MdastNode {\n  type?: MdastNodeType;\n  ordered?: boolean;\n  value?: string;\n  text?: string;\n  children?: Array<MdastNode>;\n  depth?: 1 | 2 | 3 | 4 | 5 | 6;\n  url?: string;\n  alt?: string;\n  lang?: string;\n  // mdast metadata\n  position?: any;\n  spread?: any;\n  checked?: any;\n  indent?: any;\n}\n\nexport type TextNode = { text?: string | undefined };\n\nexport type CodeBlockNode<T extends InputNodeTypes> = {\n  type: T['code_block'];\n  language: string | undefined;\n  children: Array<TextNode>;\n};\n\nexport type HeadingNode<T extends InputNodeTypes> = {\n  type:\n    | T['heading'][1]\n    | T['heading'][2]\n    | T['heading'][3]\n    | T['heading'][4]\n    | T['heading'][5]\n    | T['heading'][6];\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type ListNode<T extends InputNodeTypes> = {\n  type: T['ol_list'] | T['ul_list'];\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type ListItemNode<T extends InputNodeTypes> = {\n  type: T['listItem'];\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type ParagraphNode<T extends InputNodeTypes> = {\n  type: T['paragraph'];\n  break?: true;\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type LinkNode<T extends InputNodeTypes> = {\n  type: T['link'];\n  children: Array<DeserializedNode<T>>;\n  [urlKey: string]: string | undefined | Array<DeserializedNode<T>>;\n};\n\nexport type ImageNode<T extends InputNodeTypes> = {\n  type: T['image'];\n  children: Array<DeserializedNode<T>>;\n  [sourceOrCaptionKey: string]: string | undefined | Array<DeserializedNode<T>>;\n};\n\nexport type BlockQuoteNode<T extends InputNodeTypes> = {\n  type: T['block_quote'];\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type InlineCodeMarkNode<T extends InputNodeTypes> = {\n  type: T['inline_code_mark'];\n  children: Array<TextNode>;\n  language: string | undefined;\n};\n\nexport type ThematicBreakNode<T extends InputNodeTypes> = {\n  type: T['thematic_break'];\n  children: Array<DeserializedNode<T>>;\n};\n\nexport type ItalicNode<T extends InputNodeTypes> = {\n  [K in T['emphasis_mark']]: true;\n} & {\n  children: TextNode;\n};\nexport type BoldNode<T extends InputNodeTypes> = {\n  [K in T['strong_mark']]: true;\n} & {\n  children: TextNode;\n};\n\nexport type StrikeThoughNode<T extends InputNodeTypes> = {\n  [K in T['delete_mark']]: true;\n} & {\n  children: TextNode;\n};\n\nexport type MentionNode<T extends InputNodeTypes> = {\n  [K in T['mention']]: true;\n} & {\n  children: TextNode;\n};\n\nexport type InlineCodeNode = {\n  code: true;\n  text: string | undefined;\n};\n\nexport type DeserializedNode<T extends InputNodeTypes> =\n  | CodeBlockNode<T>\n  | HeadingNode<T>\n  | ListNode<T>\n  | ListItemNode<T>\n  | ParagraphNode<T>\n  | LinkNode<T>\n  | ImageNode<T>\n  | BlockQuoteNode<T>\n  | InlineCodeMarkNode<T>\n  | ThematicBreakNode<T>\n  | ItalicNode<T>\n  | BoldNode<T>\n  | MentionNode<T>\n  | StrikeThoughNode<T>\n  | InlineCodeNode\n  | TextNode;\n","import {\n  BlockQuoteNode,\n  CodeBlockNode,\n  defaultNodeTypes,\n  DeserializedNode,\n  HeadingNode,\n  ImageNode,\n  InputNodeTypes,\n  ItalicNode,\n  LinkNode,\n  ListItemNode,\n  ListNode,\n  MdastNode,\n  OptionType,\n  ParagraphNode,\n  TextNode,\n  ThematicBreakNode,\n  StrikeThoughNode,\n  BoldNode,\n  MentionNode,\n} from './ast-types';\n\nexport default function deserialize<T extends InputNodeTypes>(\n  node: MdastNode,\n  opts?: OptionType<T>\n) {\n  const types = {\n    ...defaultNodeTypes,\n    ...opts?.nodeTypes,\n    heading: {\n      ...defaultNodeTypes.heading,\n      ...opts?.nodeTypes?.heading,\n    },\n  };\n\n  const linkDestinationKey = opts?.linkDestinationKey ?? 'link';\n  const imageSourceKey = opts?.imageSourceKey ?? 'link';\n  const imageCaptionKey = opts?.imageCaptionKey ?? 'caption';\n\n  let children: Array<DeserializedNode<T>> = [{ text: '' }];\n\n  const nodeChildren = node.children;\n  if (nodeChildren && Array.isArray(nodeChildren) && nodeChildren.length > 0) {\n    children = nodeChildren.flatMap((c: MdastNode) =>\n      deserialize(\n        {\n          ...c,\n          ordered: node.ordered || false,\n        },\n        opts\n      )\n    );\n  }\n\n  switch (node.type) {\n    case 'heading':\n      return {\n        type: types.heading[node.depth || 1],\n        children,\n      } as HeadingNode<T>;\n    case 'list':\n      return {\n        type: node.ordered ? types.ol_list : types.ul_list,\n        children,\n      } as ListNode<T>;\n    case 'listItem':\n      return { type: types.listItem, children } as ListItemNode<T>;\n    case 'paragraph':\n      return { type: types.paragraph, children } as ParagraphNode<T>;\n    case 'link':\n      return {\n        type: types.link,\n        [linkDestinationKey]: node.url,\n        children,\n      } as LinkNode<T>;\n    case 'image':\n      return {\n        type: types.image,\n        children: [{ text: '' }],\n        [imageSourceKey]: node.url,\n        [imageCaptionKey]: node.alt,\n      } as ImageNode<T>;\n    case 'blockquote':\n      return { type: types.block_quote, children } as BlockQuoteNode<T>;\n    case 'code':\n      return {\n        type: types.code_block,\n        language: node.lang,\n        children: [{ text: node.value }],\n      } as CodeBlockNode<T>;\n\n    case 'html':\n      if (node.value?.includes('<br>')) {\n        return {\n          break: true,\n          type: types.paragraph,\n          children: [{ text: node.value?.replace(/<br>/g, '') || '' }],\n        } as ParagraphNode<T>;\n      }\n      return { type: 'paragraph', children: [{ text: node.value || '' }] };\n\n    case 'emphasis':\n      return {\n        [types.emphasis_mark as string]: true,\n        ...forceLeafNode(children as Array<TextNode>),\n        ...persistLeafFormats(children as Array<MdastNode>),\n      } as unknown as ItalicNode<T>;\n    case 'strong':\n      return {\n        [types.strong_mark as string]: true,\n        ...forceLeafNode(children as Array<TextNode>),\n        ...persistLeafFormats(children as Array<MdastNode>),\n      } as unknown as BoldNode<T>;\n    case 'delete':\n      return {\n        [types.delete_mark as string]: true,\n        ...forceLeafNode(children as Array<TextNode>),\n        ...persistLeafFormats(children as Array<MdastNode>),\n      } as unknown as StrikeThoughNode<T>;\n    case 'mention':\n      return {\n        [types.mention as string]: true,\n        ...forceLeafNode(children as Array<TextNode>),\n        ...persistLeafFormats(children as Array<MdastNode>),\n      } as unknown as MentionNode<T>;\n    case 'inlineCode':\n      return {\n        [types.inline_code_mark as string]: true,\n        text: node.value,\n        ...persistLeafFormats(children as Array<MdastNode>),\n      };\n    case 'thematicBreak':\n      return {\n        type: types.thematic_break,\n        children: [{ text: '' }],\n      } as ThematicBreakNode<T>;\n\n    case 'break':\n      return { text: '  \\n' };\n\n    case 'text':\n\n    default:\n      return { text: node.value || '' };\n  }\n}\n\nconst forceLeafNode = (children: Array<TextNode>) => ({\n  text: children.map((k) => k?.text).join(''),\n});\n\n// This function is will take any unknown keys, and bring them up a level\n// allowing leaf nodes to have many different formats at once\n// for example, bold and italic on the same node\nfunction persistLeafFormats(\n  children: Array<MdastNode>\n): Omit<MdastNode, 'children' | 'type' | 'text'> {\n  return children.reduce((acc, node) => {\n    (Object.keys(node) as Array<keyof MdastNode>).forEach(function (key) {\n      if (key === 'children' || key === 'type' || key === 'text') return;\n\n      acc[key] = node[key];\n    });\n\n    return acc;\n  }, {});\n}\n","import { BlockType, defaultNodeTypes, LeafType, NodeTypes } from './ast-types';\n\ninterface Options {\n  nodeTypes: NodeTypes;\n  listDepth?: number;\n  ignoreParagraphNewline?: boolean;\n}\n\nconst isLeafNode = (node: BlockType | LeafType): node is LeafType => {\n  return (\n    typeof (node as LeafType).text === 'string' ||\n    typeof (node as LeafType).value === 'string'\n  );\n};\n\nconst VOID_ELEMENTS: Array<keyof NodeTypes> = ['thematic_break', 'image'];\n\nconst BREAK_TAG = '\\n';\n\nexport default function serialize(\n  chunk: BlockType | LeafType,\n  opts: Options = { nodeTypes: defaultNodeTypes }\n) {\n  const {\n    nodeTypes: userNodeTypes = defaultNodeTypes,\n    ignoreParagraphNewline = false,\n    listDepth = 0,\n  } = opts;\n\n  let text = (chunk as LeafType).text || (chunk as LeafType).value || '';\n  let type = (chunk as BlockType).type || '';\n\n  const nodeTypes: NodeTypes = {\n    ...defaultNodeTypes,\n    ...userNodeTypes,\n    heading: {\n      ...defaultNodeTypes.heading,\n      ...userNodeTypes.heading,\n    },\n  };\n\n  const LIST_TYPES = [nodeTypes.ul_list, nodeTypes.ol_list];\n\n  let children = text;\n\n  if (!isLeafNode(chunk)) {\n    children = chunk.children\n      .map((c: BlockType | LeafType) => {\n        const isList = !isLeafNode(c)\n          ? (LIST_TYPES as string[]).includes(c.type || '')\n          : false;\n\n        const selfIsList = (LIST_TYPES as string[]).includes(chunk.type || '');\n\n        // Links can have the following shape\n        // In which case we don't want to surround\n        // with break tags\n        // {\n        //  type: 'paragraph',\n        //  children: [\n        //    { text: '' },\n        //    { type: 'link', children: [{ text: foo.com }]}\n        //    { text: '' }\n        //  ]\n        // }\n        let childrenHasLink = false;\n\n        if (!isLeafNode(chunk) && Array.isArray(chunk.children)) {\n          childrenHasLink = chunk.children.some(\n            (f) => !isLeafNode(f) && f.type === nodeTypes.link\n          );\n        }\n\n        return serialize(\n          { ...c, parentType: type },\n          {\n            nodeTypes,\n            // WOAH.\n            // what we're doing here is pretty tricky, it relates to the block below where\n            // we check for ignoreParagraphNewline and set type to paragraph.\n            // We want to strip out empty paragraphs sometimes, but other times we don't.\n            // If we're the descendant of a list, we know we don't want a bunch\n            // of whitespace. If we're parallel to a link we also don't want\n            // to respect neighboring paragraphs\n            ignoreParagraphNewline:\n              (ignoreParagraphNewline ||\n                isList ||\n                selfIsList ||\n                childrenHasLink) &&\n              // if we have c.break, never ignore empty paragraph new line\n              !(c as BlockType).break,\n\n            // track depth of nested lists so we can add proper spacing\n            listDepth: (LIST_TYPES as string[]).includes(\n              (c as BlockType).type || ''\n            )\n              ? listDepth + 1\n              : listDepth,\n          }\n        );\n      })\n      .join('');\n  }\n\n  // This is pretty fragile code, check the long comment where we iterate over children\n  if (\n    !ignoreParagraphNewline &&\n    (text === '' || text === '\\n') &&\n    chunk.parentType === nodeTypes.paragraph &&\n    type !== nodeTypes.image\n  ) {\n    type = nodeTypes.paragraph;\n    children = BREAK_TAG;\n  }\n\n  if (children === '' && !VOID_ELEMENTS.find((k) => nodeTypes[k] === type))\n    return;\n\n  // Never allow decorating break tags with rich text formatting,\n  // this can malform generated markdown\n  // Also ensure we're only ever applying text formatting to leaf node\n  // level chunks, otherwise we can end up in a situation where\n  // we try applying formatting like to a node like this:\n  // \"Text foo bar **baz**\" resulting in \"**Text foo bar **baz****\"\n  // which is invalid markup and can mess everything up\n  if (children !== BREAK_TAG && isLeafNode(chunk)) {\n    if (chunk.mention) {\n      children = retainWhitespaceAndFormat(children, '**');\n    } else if (chunk.strikethrough && chunk.bold && chunk.italic) {\n      children = retainWhitespaceAndFormat(children, '~~***');\n    } else if (chunk.bold && chunk.italic) {\n      children = retainWhitespaceAndFormat(children, '***');\n    } else {\n      if (chunk.bold) {\n        children = retainWhitespaceAndFormat(children, '**');\n      }\n\n      if (chunk.italic) {\n        children = retainWhitespaceAndFormat(children, '_');\n      }\n\n      if (chunk.strikethrough) {\n        children = retainWhitespaceAndFormat(children, '~~');\n      }\n\n      if (chunk.code) {\n        children = retainWhitespaceAndFormat(children, '`');\n      }\n    }\n  }\n\n  switch (type) {\n    case nodeTypes.heading[1]:\n      return `# ${children}`;\n    case nodeTypes.heading[2]:\n      return `## ${children}`;\n    case nodeTypes.heading[3]:\n      return `### ${children}`;\n    case nodeTypes.heading[4]:\n      return `#### ${children}`;\n    case nodeTypes.heading[5]:\n      return `##### ${children}`;\n    case nodeTypes.heading[6]:\n      return `###### ${children}`;\n\n    case nodeTypes.block_quote:\n      // For some reason, marked is parsing blockquotes w/ one new line\n      // as contiued blockquotes, so adding two new lines ensures that doesn't\n      // happen\n      return `> ${children}\\n`;\n\n    case nodeTypes.code_block:\n      return `\\`\\`\\`${\n        (chunk as BlockType).language || ''\n      }\\n${children}\\n\\`\\`\\`\\n`;\n\n    case nodeTypes.link:\n      return `[${children}](${(chunk as BlockType).url || ''})`;\n    case nodeTypes.image:\n      return `![${(chunk as BlockType).caption ?? ''}](${\n        (chunk as BlockType).url || ''\n      })`;\n\n    case nodeTypes.ul_list:\n    case nodeTypes.ol_list:\n      return `\\n${children}\\n`;\n\n    case nodeTypes.listItem:\n      const isOL = chunk && chunk.parentType === nodeTypes.ol_list;\n      const treatAsLeaf =\n        (chunk as BlockType).children.length === 1 &&\n        ((chunk as BlockType).children[0] as BlockType).type === 'lic' &&\n        isLeafNode(((chunk as BlockType).children[0] as BlockType).children[0]);\n\n      let spacer = '';\n      for (let k = 0; listDepth > k; k++) {\n        if (isOL) {\n          // https://github.com/remarkjs/remark-react/issues/65\n          spacer += '   ';\n        } else {\n          spacer += '  ';\n        }\n      }\n      return `${spacer}${isOL ? '1.' : '-'} ${children}${\n        treatAsLeaf ? '\\n' : ''\n      }`;\n\n    case nodeTypes.paragraph:\n      return `${children.replaceAll('\\n', '  \\n')}\\n`;\n\n    case nodeTypes.thematic_break:\n      return `\\n---\\n`;\n    case nodeTypes.mention:\n      return `**${children}**`;\n\n    default:\n      return children.replaceAll('\\n', '  \\n');\n  }\n}\n\n// This function handles the case of a string like this: \"   foo   \"\n// Where it would be invalid markdown to generate this: \"**   foo   **\"\n// We instead, want to trim the whitespace out, apply formatting, and then\n// bring the whitespace back. So our returned string looks like this: \"   **foo**   \"\nfunction retainWhitespaceAndFormat(string: string, format: string) {\n  // we keep this for a comparison later\n  const frozenString = string.trim();\n\n  // children will be mutated\n  let children = frozenString;\n\n  // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n  // formats, so we can create ~~***FooBar***~~\n  const fullFormat = `${format}${children}${reverseStr(format)}`;\n\n  // This conditions accounts for no whitespace in our string\n  // if we don't have any, we can return early.\n  if (children.length === string.length) {\n    return fullFormat;\n  }\n\n  // if we do have whitespace, let's add our formatting around our trimmed string\n  // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n  // formats, so we can create ~~***FooBar***~~\n  const formattedString = format + children + reverseStr(format);\n\n  // and replace the non-whitespace content of the string\n  return string.replace(frozenString, formattedString);\n}\n\nconst reverseStr = (string: string) => string.split('').reverse().join('');\n","import { MdastNode, OptionType } from './ast-types';\nimport transform from './deserialize';\n\nexport default function plugin(opts?: OptionType) {\n  const compiler = (node: { children: Array<MdastNode> }) => {\n    return node.children.map((c) => transform(c, opts));\n  };\n\n  // @ts-ignore\n  this.Compiler = compiler;\n}\n"],"names":["defaultNodeTypes","paragraph","block_quote","code_block","link","ul_list","ol_list","listItem","heading","1","2","3","4","5","6","emphasis_mark","strong_mark","delete_mark","inline_code_mark","thematic_break","image","mention","deserialize","node","opts","types","nodeTypes","_opts$nodeTypes","linkDestinationKey","imageSourceKey","imageCaptionKey","children","text","nodeChildren","Array","isArray","length","flatMap","c","ordered","type","depth","url","alt","language","lang","value","_node$value","includes","break","replace","forceLeafNode","persistLeafFormats","map","k","join","reduce","acc","Object","keys","forEach","key","isLeafNode","VOID_ELEMENTS","retainWhitespaceAndFormat","string","format","frozenString","trim","fullFormat","reverseStr","formattedString","split","reverse","this","Compiler","transform","serialize","chunk","userNodeTypes","ignoreParagraphNewline","listDepth","LIST_TYPES","isList","selfIsList","childrenHasLink","some","f","parentType","find","strikethrough","bold","italic","code","caption","isOL","treatAsLeaf","spacer","replaceAll"],"mappings":"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"}